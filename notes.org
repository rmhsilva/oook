/General notes, memos, etc/

* Children
** has-one
** owns-one
** owns-many

* ASSOCIATIONS, as applied to Left and Right

** has-one (FK in Left)

Left requires one instance of Right, but Right doesn't care or know
about this relationship. (e.g. ingredient -> unit).

Get: get the relevant Right and merge it into Left
Save: only save the reference to Right
Delete: do nothing with Right

** owns-one (FK in right) - use with belongs-to (blargh redundancy)

Left owns one Right, and Right knows it. Left cannot have more than one
Right. (e.g. user <- config)

Get: get the Right and merge into Left
Save: update Right with any changes, ensure reference (ID) has not changed
Delete: delete right as well

** belongs-to (FK in Left) - use with owns-many or owns-one

Left is owned by one Right. Left cannot have more than one owner. (e.g. config
<- user). However Right might have more than one Left (e.g. step* <- recipe)

Get: do not try to resolve the parent relation (circular dep)
Save: ensure the reference to Right has not changed
Delete: do nothing

** owns-many (FK in Right) - use with belongs-to

Left has many Rights, and the Rights know which Left they belong to. (e.g.
recipe <- step*)

Get: Find all Right that match Left's ID
Save: Save new Rights in Left, delete old Rights no longer in Left
Delete: delete all rights as well

** many-to-many (intersection table) **Not implementing for now

Left references many instances of Right, and Right might be referenced by many
instances of Left. (e.g. programmer <-> project, a programmer is part of many
projects and a project has many programmers)

Get: do not try to resolve the parent relation (circular dep)
